{"version":3,"sources":["index.js"],"names":["gridStyle","maxWidth","margin","display","flexWrap","justifyContent","cardStyle","backgroundColor","backgroundSize","backgroundRepeat","backgroundPosition","height","width","imageStyle","text","marginLeft","marginRight","marginTop","marginBottom","flexDirection","fontSize","resetBtn","shuffle","cardsArray","slice","sort","Math","random","Game","props","state","deck","cards","visibleCards","Array","length","fill","selectedCards","pairsRemoved","turnNumber","initialState","setCardsVisible","bind","resetGame","card","id","this","newVisibleCards","name","cardsStateUpdate","firstCard","secondCard","setState","setTimeout","checkPairs","map","t","i","value","index","filter","x","firstIndex","secondIndex","newPairsRemoved","invisibleCards","style","visibility","disabled","onClick","src","img","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.13294b94.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst cards = [\n  {\n    id: 1,\n    name: \"Brainstorm\",\n    img:\n      \"https://github.com/DanijelPlese/12monkeys/blob/development/hello-react/js-card-game/images/Brainstorm.jpeg?raw=true\",\n  },\n  {\n    id: 2,\n    name: \"Command\",\n    img:\n      \"https://github.com/DanijelPlese/12monkeys/blob/development/hello-react/js-card-game/images/Command.jpeg?raw=true\",\n  },\n  {\n    id: 3,\n    name: \"Counterspell\",\n    img:\n      \"https://github.com/DanijelPlese/12monkeys/blob/development/hello-react/js-card-game/images/Counterspell.jpeg?raw=true\",\n  },\n  {\n    id: 4,\n    name: \"Daze\",\n    img:\n      \"https://github.com/DanijelPlese/12monkeys/blob/development/hello-react/js-card-game/images/Daze.jpeg?raw=true\",\n  },\n  {\n    id: 5,\n    name: \"Force\",\n    img:\n      \"https://github.com/DanijelPlese/12monkeys/blob/development/hello-react/js-card-game/images/Force.jpeg?raw=true\",\n  },\n  {\n    id: 6,\n    name: \"Gush\",\n    img:\n      \"https://github.com/DanijelPlese/12monkeys/blob/development/hello-react/js-card-game/images/Gush.jpeg?raw=true\",\n  },\n  {\n    id: 7,\n    name: \"Jace\",\n    img:\n      \"https://github.com/DanijelPlese/12monkeys/blob/development/hello-react/js-card-game/images/Jace.jpeg?raw=true\",\n  },\n  {\n    id: 8,\n    name: \"Narset\",\n    img:\n      \"https://github.com/DanijelPlese/12monkeys/blob/development/hello-react/js-card-game/images/Narset.jpeg?raw=true\",\n  },\n  {\n    id: 9,\n    name: \"Pact\",\n    img:\n      \"https://github.com/DanijelPlese/12monkeys/blob/development/hello-react/js-card-game/images/Pact.jpeg?raw=true\",\n  },\n  {\n    id: 10,\n    name: \"Ponder\",\n    img:\n      \"https://github.com/DanijelPlese/12monkeys/blob/development/hello-react/js-card-game/images/Ponder.jpeg?raw=true\",\n  },\n  {\n    id: 11,\n    name: \"Urza\",\n    img:\n      \"https://github.com/DanijelPlese/12monkeys/blob/development/hello-react/js-card-game/images/Urza.jpeg?raw=true\",\n  },\n  {\n    id: 12,\n    name: \"Visions\",\n    img:\n      \"https://github.com/DanijelPlese/12monkeys/blob/development/hello-react/js-card-game/images/Visions.jpeg?raw=true\",\n  },\n  {\n    id: 13,\n    name: \"Brainstorm\",\n    img:\n      \"https://github.com/DanijelPlese/12monkeys/blob/development/hello-react/js-card-game/images/Brainstorm.jpeg?raw=true\",\n  },\n  {\n    id: 14,\n    name: \"Command\",\n    img:\n      \"https://github.com/DanijelPlese/12monkeys/blob/development/hello-react/js-card-game/images/Command.jpeg?raw=true\",\n  },\n  {\n    id: 15,\n    name: \"Counterspell\",\n    img:\n      \"https://github.com/DanijelPlese/12monkeys/blob/development/hello-react/js-card-game/images/Counterspell.jpeg?raw=true\",\n  },\n  {\n    id: 16,\n    name: \"Daze\",\n    img:\n      \"https://github.com/DanijelPlese/12monkeys/blob/development/hello-react/js-card-game/images/Daze.jpeg?raw=true\",\n  },\n  {\n    id: 17,\n    name: \"Force\",\n    img:\n      \"https://github.com/DanijelPlese/12monkeys/blob/development/hello-react/js-card-game/images/Force.jpeg?raw=true\",\n  },\n  {\n    id: 18,\n    name: \"Gush\",\n    img:\n      \"https://github.com/DanijelPlese/12monkeys/blob/development/hello-react/js-card-game/images/Gush.jpeg?raw=true\",\n  },\n  {\n    id: 19,\n    name: \"Jace\",\n    img:\n      \"https://github.com/DanijelPlese/12monkeys/blob/development/hello-react/js-card-game/images/Jace.jpeg?raw=true\",\n  },\n  {\n    id: 20,\n    name: \"Narset\",\n    img:\n      \"https://github.com/DanijelPlese/12monkeys/blob/development/hello-react/js-card-game/images/Narset.jpeg?raw=true\",\n  },\n  {\n    id: 21,\n    name: \"Pact\",\n    img:\n      \"https://github.com/DanijelPlese/12monkeys/blob/development/hello-react/js-card-game/images/Pact.jpeg?raw=true\",\n  },\n  {\n    id: 22,\n    name: \"Ponder\",\n    img:\n      \"https://github.com/DanijelPlese/12monkeys/blob/development/hello-react/js-card-game/images/Ponder.jpeg?raw=true\",\n  },\n  {\n    id: 23,\n    name: \"Urza\",\n    img:\n      \"https://github.com/DanijelPlese/12monkeys/blob/development/hello-react/js-card-game/images/Urza.jpeg?raw=true\",\n  },\n  {\n    id: 24,\n    name: \"Visions\",\n    img:\n      \"https://github.com/DanijelPlese/12monkeys/blob/development/hello-react/js-card-game/images/Visions.jpeg?raw=true\",\n  },\n];\nconst gridStyle = {\n  maxWidth: 1100,\n  margin: \"0 auto\",\n  display: \"flex\",\n  flexWrap: \"wrap\",\n  justifyContent: \"space-evenly\",\n};\nconst cardStyle = {\n  margin: 5,\n  backgroundColor: \"rgb(77, 114, 155)\",\n  backgroundSize: \"contain\",\n  backgroundRepeat: \"no-repeat\",\n  backgroundPosition: \"center center\",\n  height: 150,\n  width: 150,\n};\nconst imageStyle = {\n  margin: 5,\n  backgroundColor: \"rgb(77, 114, 155)\",\n  backgroundSize: \"contain\",\n  backgroundRepeat: \"no-repeat\",\n  backgroundPosition: \"center center\",\n  height: 120,\n  width: 120,\n};\nconst text = {\n  justifyContent: \"space-around\",\n  display: \"flex\",\n  flexWrap: \"nowrap\",\n  marginLeft: \"20%\",\n  marginRight: \"20%\",\n  marginTop: 50,\n  marginBottom: 50,\n  flexDirection: \"row\",\n  fontSize: 30,\n};\nconst resetBtn = {\n  fontSize: 26,\n  backgroundColor: \"rgb(144, 185, 230)\",\n};\n\n// Shuffles copy of our array of cards\nconst shuffle = (cardsArray) => {\n  const cardsCopy = cardsArray.slice(0);\n  return cardsCopy.sort(() => {\n    return Math.random() - 0.5;\n  });\n};\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      deck: shuffle(props.cards),\n      visibleCards: Array(props.cards.length).fill(false),\n      selectedCards: [],\n      pairsRemoved: Array(props.cards.length).fill(false),\n      turnNumber: 0,\n    };\n    this.initialState = this.state;\n    this.setCardsVisible = this.setCardsVisible.bind(this);\n    this.resetGame = this.resetGame.bind(this);\n  }\n\n  // Handles information about clicked cards for further purposes.\n  // Is the card visible? What is cards id and name?\n  setCardsVisible(card, id) {\n    if (this.state.selectedCards.length < 2) {\n      const newVisibleCards = [...this.state.visibleCards];\n      const selectedCards = [...this.state.selectedCards, card.name];\n      newVisibleCards[id] = true;\n      this.cardsStateUpdate(selectedCards, newVisibleCards);\n    }\n  }\n\n  // Function checks if two cards are matched\n  checkPairs(firstCard, secondCard) {\n    return firstCard === secondCard;\n  }\n\n  // Makes all cards in array hidden\n  invisibleCards() {\n    return Array(this.props.cards.length).fill(false);\n  }\n\n  // Updates state with information regarding selected cards and\n  // determines what happens with two selected cards if matched or not\n  cardsStateUpdate(selectedCards, newVisibleCards) {\n    this.setState({\n      ...this.state,\n      visibleCards: newVisibleCards,\n      selectedCards: selectedCards,\n    });\n    if (selectedCards.length === 2) {\n      setTimeout(() => {\n        // If two cards matches, remove them from the game\n        if (this.checkPairs(selectedCards[0], selectedCards[1])) {\n          const [firstIndex, secondIndex] = newVisibleCards\n            .map((t, i) => {\n              return {\n                value: t,\n                index: i,\n              };\n            })\n            .filter((x) => {\n              return x.value;\n            })\n            .map((t) => {\n              return t.index;\n            });\n          const newPairsRemoved = [...this.state.pairsRemoved];\n          newPairsRemoved[firstIndex] = true;\n          newPairsRemoved[secondIndex] = true;\n          this.setState({\n            ...this.state,\n            selectedCards: [],\n            visibleCards: this.invisibleCards(),\n            pairsRemoved: newPairsRemoved,\n            turnNumber: this.state.turnNumber + 1,\n          });\n\n          // If two cards don't match, put them back in game\n        } else {\n          this.setState({\n            ...this.state,\n            selectedCards: [],\n            visibleCards: this.invisibleCards(),\n            turnNumber: this.state.turnNumber + 1,\n          });\n        }\n      }, 500);\n    }\n  }\n\n  // Reset takes all cards and shuffle them into a new game\n  resetGame() {\n    this.setState({\n      ...this.initialState,\n      deck: shuffle(this.props.cards),\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div style={text}>{this.props.name}</div>\n        <div style={gridStyle}>\n          {this.state.deck.map((card, id) => {\n            return (\n              <div\n                key={id}\n                style={\n                  this.state.pairsRemoved[id]\n                    ? { visibility: \"hidden\" }\n                    : { visibility: \"visible\" }\n                }\n              >\n                <button\n                  disabled={this.state.visibleCards[id] ? true : false}\n                  style={cardStyle}\n                  onClick={() => {\n                    this.setCardsVisible(card, id);\n                  }}\n                >\n                  <img\n                    style={\n                      this.state.visibleCards[id]\n                        ? imageStyle\n                        : { display: \"none\" }\n                    }\n                    src={card.img}\n                    alt=\"\"\n                  />\n                </button>\n              </div>\n            );\n          })}\n        </div>\n        <div style={text}>\n          <div>Turn {this.state.turnNumber}</div>\n          <button style={resetBtn} onClick={this.resetGame}>\n            Reset\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\nReactDOM.render(\n  <Game name={\"Memory Game\"} cards={cards} />,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}